// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --auto --filename ./crd-catalog/aws-controllers-k8s/apigatewayv2-controller/apigatewayv2.services.k8s.aws/v1alpha1/integrations.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// IntegrationSpec defines the desired state of Integration. 
///  Represents an integration.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "apigatewayv2.services.k8s.aws", version = "v1alpha1", kind = "Integration", plural = "integrations")]
#[kube(namespaced)]
#[kube(status = "IntegrationStatus")]
pub struct IntegrationSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiID")]
    pub api_id: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
    ///  from: name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiRef")]
    pub api_ref: Option<IntegrationApiRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionID")]
    pub connection_id: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
    ///  from: name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionRef")]
    pub connection_ref: Option<IntegrationConnectionRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionType")]
    pub connection_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentHandlingStrategy")]
    pub content_handling_strategy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsARN")]
    pub credentials_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationMethod")]
    pub integration_method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationSubtype")]
    pub integration_subtype: Option<String>,
    #[serde(rename = "integrationType")]
    pub integration_type: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationURI")]
    pub integration_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passthroughBehavior")]
    pub passthrough_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "payloadFormatVersion")]
    pub payload_format_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestParameters")]
    pub request_parameters: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTemplates")]
    pub request_templates: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseParameters")]
    pub response_parameters: Option<BTreeMap<String, IntegrationResponseParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateSelectionExpression")]
    pub template_selection_expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutInMillis")]
    pub timeout_in_millis: Option<i64>,
    /// The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<IntegrationTlsConfig>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
///  from: name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationApiRef {
    /// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<IntegrationApiRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationApiRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
///  from: name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationConnectionRef {
    /// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<IntegrationConnectionRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationConnectionRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationTlsConfig {
    /// A string with a length between [1-512].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverNameToVerify")]
    pub server_name_to_verify: Option<String>,
}

/// IntegrationStatus defines the observed state of Integration
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationStatus {
    /// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ackResourceMetadata")]
    pub ack_resource_metadata: Option<IntegrationStatusAckResourceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGatewayManaged")]
    pub api_gateway_managed: Option<bool>,
    /// All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<IntegrationStatusConditions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationID")]
    pub integration_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationResponseSelectionExpression")]
    pub integration_response_selection_expression: Option<String>,
}

/// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationStatusAckResourceMetadata {
    /// ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an "adopted" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.
    #[serde(rename = "ownerAccountID")]
    pub owner_account_id: String,
    /// Region is the AWS region in which the resource exists or will exist.
    pub region: String,
}

/// Condition is the common struct used by all CRDs managed by ACK service controllers to indicate terminal states  of the CR and its backend AWS service API resource
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationStatusConditions {
    /// Last time the condition transitioned from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// A human readable message indicating details about the transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status of the condition, one of True, False, Unknown.
    pub status: String,
    /// Type is the type of the Condition
    #[serde(rename = "type")]
    pub r#type: String,
}

