// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --auto --filename ./crd-catalog/emissary-ingress/emissary/getambassador.io/v3alpha1/mappings.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// MappingSpec defines the desired state of Mapping
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "getambassador.io", version = "v3alpha1", kind = "Mapping", plural = "mappings")]
#[kube(namespaced)]
#[kube(status = "MappingStatus")]
pub struct MappingSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_linkerd_headers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_request_headers: Option<BTreeMap<String, MappingAddRequestHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_response_headers: Option<BTreeMap<String, MappingAddResponseHeaders>>,
    /// A case-insensitive list of the non-HTTP protocols to allow "upgrading" to from HTTP via the "Connection: upgrade" mechanism[1].  After the upgrade, Ambassador does not interpret the traffic, and behaves similarly to how it does for TCPMappings. 
    ///  [1]: https://tools.ietf.org/html/rfc7230#section-6.7 
    ///  For example, if your upstream service supports WebSockets, you would write 
    ///  allow_upgrade: - websocket 
    ///  Or if your upstream service supports upgrading from HTTP to SPDY (as the Kubernetes apiserver does for `kubectl exec` functionality), you would write 
    ///  allow_upgrade: - spdy/3.1
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_upgrade: Option<Vec<String>>,
    /// AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
    ///  ambassador_id: - "default"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ambassador_id: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth_context_extensions: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_host_rewrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bypass_auth: Option<bool>,
    /// If true, bypasses any `error_response_overrides` set on the Ambassador module.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bypass_error_response_overrides: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub circuit_breakers: Option<Vec<MappingCircuitBreakers>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster_idle_timeout_ms: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster_max_connection_lifetime_ms: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect_timeout_ms: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cors: Option<MappingCors>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dns_type: Option<String>,
    /// DocsInfo provides some extra information about the docs for the Mapping. Docs is used by both the agent and the DevPortal.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub docs: Option<MappingDocs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_ipv4: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_ipv6: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub envoy_override: Option<BTreeMap<String, serde_json::Value>>,
    /// Error response overrides for this Mapping. Replaces all of the `error_response_overrides` set on the Ambassador module, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error_response_overrides: Option<Vec<MappingErrorResponseOverrides>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health_checks: Option<Vec<MappingHealthChecks>>,
    /// Exact match for the hostname of a request if HostRegex is false; regex match for the hostname if HostRegex is true. 
    ///  Host specifies both a match for the ':authority' header of a request, as well as a match criterion for Host CRDs: a Mapping that specifies Host will not associate with a Host that doesn't have a matching Hostname. 
    ///  If both Host and Hostname are set, an error is logged, Host is ignored, and Hostname is used. 
    ///  DEPRECATED: Host is either an exact match or a regex, depending on HostRegex. Use HostName instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host_redirect: Option<bool>,
    /// DEPRECATED: Host is either an exact match or a regex, depending on HostRegex. Use HostName instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host_regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host_rewrite: Option<String>,
    /// Hostname is a DNS glob specifying the hosts to which this Mapping applies. 
    ///  Hostname specifies both a match for the ':authority' header of a request, as well as a match criterion for Host CRDs: a Mapping that specifies Hostname will not associate with a Host that doesn't have a matching Hostname. 
    ///  If both Host and Hostname are set, an error is logged, Host is ignored, and Hostname is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle_timeout_ms: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keepalive: Option<MappingKeepalive>,
    /// A DomainMap is the overall Mapping.spec.Labels type. It maps domains (kind of like namespaces for Mapping labels) to arrays of label groups.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, MappingLabels>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub load_balancer: Option<MappingLoadBalancer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method_regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modules: Option<Vec<MappingModules>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outlier_detection: Option<String>,
    /// Path replacement to use when generating an HTTP redirect. Used with `host_redirect`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path_redirect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub precedence: Option<i64>,
    pub prefix: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix_exact: Option<bool>,
    /// Prefix rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix_redirect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix_regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query_parameters: Option<BTreeMap<String, String>>,
    /// The response code to use when generating an HTTP redirect. Defaults to 301. Used with `host_redirect`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect_response_code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex_headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex_query_parameters: Option<BTreeMap<String, String>>,
    /// Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex_redirect: Option<MappingRegexRedirect>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex_rewrite: Option<MappingRegexRewrite>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_request_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_response_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolver: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub respect_dns_ttl: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_policy: Option<MappingRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<String>,
    pub service: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shadow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stats_name: Option<String>,
    /// The timeout for requests that use this Mapping. Overrides `cluster_request_timeout_ms` set on the Ambassador Module, if it exists.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout_ms: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<String>,
    /// use_websocket is deprecated, and is equivlaent to setting `allow_upgrade: ["websocket"]`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_websocket: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "v2BoolHeaders")]
    pub v2_bool_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "v2BoolQueryParameters")]
    pub v2_bool_query_parameters: Option<Vec<String>>,
    /// V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "v2ExplicitTLS")]
    pub v2_explicit_tls: Option<MappingV2ExplicitTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingAddRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "v2Representation")]
    pub v2_representation: Option<MappingAddRequestHeadersV2Representation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MappingAddRequestHeadersV2Representation {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "null")]
    Null,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingAddResponseHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "v2Representation")]
    pub v2_representation: Option<MappingAddResponseHeadersV2Representation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MappingAddResponseHeadersV2Representation {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "null")]
    Null,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingCircuitBreakers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_connections: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_pending_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<MappingCircuitBreakersPriority>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MappingCircuitBreakersPriority {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "high")]
    High,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingCors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposed_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_age: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origins: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "v2CommaSeparatedOrigins")]
    pub v2_comma_separated_origins: Option<bool>,
}

/// DocsInfo provides some extra information about the docs for the Mapping. Docs is used by both the agent and the DevPortal.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingDocs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignored: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout_ms: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// A response rewrite for an HTTP error response
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingErrorResponseOverrides {
    /// The new response body
    pub body: MappingErrorResponseOverridesBody,
    /// The status code to match on -- not a pointer because it's required.
    pub on_status_code: i64,
}

/// The new response body
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingErrorResponseOverridesBody {
    /// The content type to set on the error response body when using text_format or text_format_source. Defaults to 'text/plain'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    /// A JSON response with content-type: application/json. The values can contain format text like in text_format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json_format: Option<BTreeMap<String, String>>,
    /// A format string representing a text response body. Content-Type can be set using the `content_type` field below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text_format: Option<String>,
    /// A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text_format_source: Option<MappingErrorResponseOverridesBodyTextFormatSource>,
}

/// A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingErrorResponseOverridesBodyTextFormatSource {
    /// The name of a file on the Ambassador pod that contains a format text string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filename: Option<String>,
}

/// HealthCheck specifies settings for performing active health checking on upstreams
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingHealthChecks {
    /// Configuration for where the healthcheck request should be made to
    pub health_check: MappingHealthChecksHealthCheck,
    /// Number of expected responses for the upstream to be considered healthy. Defaults to 1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub healthy_threshold: Option<i64>,
    /// Interval between health checks. Defaults to every 5 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// Timeout for connecting to the health checking endpoint. Defaults to 3 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    /// Number of non-expected responses for the upstream to be considered unhealthy. A single 503 will mark the upstream as unhealthy regardless of the threshold. Defaults to 2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unhealthy_threshold: Option<i64>,
}

/// Configuration for where the healthcheck request should be made to
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingHealthChecksHealthCheck {
    /// HealthCheck for gRPC upstreams. Only one of grpc_health_check or http_health_check may be specified
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<MappingHealthChecksHealthCheckGrpc>,
    /// HealthCheck for HTTP upstreams. Only one of http_health_check or grpc_health_check may be specified
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<MappingHealthChecksHealthCheckHttp>,
}

/// HealthCheck for gRPC upstreams. Only one of grpc_health_check or http_health_check may be specified
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingHealthChecksHealthCheckGrpc {
    /// The value of the :authority header in the gRPC health check request. If left empty the upstream name will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    /// The upstream name parameter which will be sent to gRPC service in the health check message
    pub upstream_name: String,
}

/// HealthCheck for HTTP upstreams. Only one of http_health_check or grpc_health_check may be specified
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingHealthChecksHealthCheckHttp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_request_headers: Option<BTreeMap<String, MappingHealthChecksHealthCheckHttpAddRequestHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expected_statuses: Option<Vec<MappingHealthChecksHealthCheckHttpExpectedStatuses>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_request_headers: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingHealthChecksHealthCheckHttpAddRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "v2Representation")]
    pub v2_representation: Option<MappingHealthChecksHealthCheckHttpAddRequestHeadersV2Representation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MappingHealthChecksHealthCheckHttpAddRequestHeadersV2Representation {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "null")]
    Null,
}

/// A range of response statuses from Start to End inclusive
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingHealthChecksHealthCheckHttpExpectedStatuses {
    /// End of the statuses to include. Must be between 100 and 599 (inclusive)
    pub max: i64,
    /// Start of the statuses to include. Must be between 100 and 599 (inclusive)
    pub min: i64,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingKeepalive {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle_time: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub probes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingLoadBalancer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cookie: Option<MappingLoadBalancerCookie>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    pub policy: MappingLoadBalancerPolicy,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_ip: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingLoadBalancerCookie {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MappingLoadBalancerPolicy {
    #[serde(rename = "round_robin")]
    RoundRobin,
    #[serde(rename = "ring_hash")]
    RingHash,
    #[serde(rename = "maglev")]
    Maglev,
    #[serde(rename = "least_request")]
    LeastRequest,
}

/// MappingSpec defines the desired state of Mapping
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MappingRedirectResponseCode {
    #[serde(rename = "301")]
    r#_301,
    #[serde(rename = "302")]
    r#_302,
    #[serde(rename = "303")]
    r#_303,
    #[serde(rename = "307")]
    r#_307,
    #[serde(rename = "308")]
    r#_308,
}

/// Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingRegexRedirect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substitution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingRegexRewrite {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substitution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub per_try_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_on: Option<MappingRetryPolicyRetryOn>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MappingRetryPolicyRetryOn {
    #[serde(rename = "5xx")]
    r#_5xx,
    #[serde(rename = "gateway-error")]
    GatewayError,
    #[serde(rename = "connect-failure")]
    ConnectFailure,
    #[serde(rename = "retriable-4xx")]
    Retriable4xx,
    #[serde(rename = "refused-stream")]
    RefusedStream,
    #[serde(rename = "retriable-status-codes")]
    RetriableStatusCodes,
}

/// V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingV2ExplicitTls {
    /// ServiceScheme specifies how to spell and capitalize the scheme-part of the service URL. 
    ///  Acceptable values are "http://" (case-insensitive), "https://" (case-insensitive), or "".  The value is used if it agrees with whether or not this resource enables TLS origination, or if something else in the resource overrides the scheme.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceScheme")]
    pub service_scheme: Option<String>,
    /// TLS controls whether and how to represent the "tls" field when its value could be implied by the "service" field.  In v2, there were a lot of different ways to spell an "empty" value, and this field specifies which way to spell it (and will therefore only be used if the value will indeed be empty). 
    ///  | Value        | Representation                        | Meaning of representation          | |--------------+---------------------------------------+------------------------------------| | ""           | omit the field                        | defer to service (no TLSContext)   | | "null"       | store an explicit "null" in the field | defer to service (no TLSContext)   | | "string"     | store an empty string in the field    | defer to service (no TLSContext)   | | "bool:false" | store a Boolean "false" in the field  | defer to service (no TLSContext)   | | "bool:true"  | store a Boolean "true" in the field   | originate TLS (no TLSContext)      | 
    ///  If the meaning of the representation contradicts anything else (if a TLSContext is to be used, or in the case of "bool:true" if TLS is not to be originated), then this field is ignored.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<MappingV2ExplicitTlsTls>,
}

/// V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MappingV2ExplicitTlsTls {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "null")]
    Null,
    #[serde(rename = "bool:true")]
    BoolTrue,
    #[serde(rename = "bool:false")]
    BoolFalse,
    #[serde(rename = "string")]
    String,
}

/// MappingStatus defines the observed state of Mapping
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MappingStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<MappingStatusState>,
}

/// MappingStatus defines the observed state of Mapping
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MappingStatusState {
    #[serde(rename = "")]
    KopiumEmpty,
    Inactive,
    Running,
}

