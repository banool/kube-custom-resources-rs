// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --auto --filename ./crd-catalog/solo-io/gloo/gloo.solo.io/v1/proxies.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "gloo.solo.io", version = "v1", kind = "Proxy", plural = "proxies")]
#[kube(namespaced)]
pub struct ProxySpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressedSpec")]
    pub compressed_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listeners: Option<Vec<ProxyListeners>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<ProxyNamespacedStatuses>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListeners {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aggregateListener")]
    pub aggregate_listener: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bindAddress")]
    pub bind_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bindPort")]
    pub bind_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpListener")]
    pub http_listener: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hybridListener")]
    pub hybrid_listener: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataStatic")]
    pub metadata_static: Option<ProxyListenersMetadataStatic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<ProxyListenersOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeOptions")]
    pub route_options: Option<ProxyListenersRouteOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfigurations")]
    pub ssl_configurations: Option<Vec<ProxyListenersSslConfigurations>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpListener")]
    pub tcp_listener: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useProxyProto")]
    pub use_proxy_proto: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersMetadataStatic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ProxyListenersMetadataStaticSources>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersMetadataStaticSources {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceKind")]
    pub resource_kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceRef")]
    pub resource_ref: Option<ProxyListenersMetadataStaticSourcesResourceRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersMetadataStaticSourcesResourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLoggingService")]
    pub access_logging_service: Option<ProxyListenersOptionsAccessLoggingService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionBalanceConfig")]
    pub connection_balance_config: Option<ProxyListenersOptionsConnectionBalanceConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<ProxyListenersOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perConnectionBufferLimitBytes")]
    pub per_connection_buffer_limit_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyProtocol")]
    pub proxy_protocol: Option<ProxyListenersOptionsProxyProtocol>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socketOptions")]
    pub socket_options: Option<Vec<ProxyListenersOptionsSocketOptions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLog")]
    pub access_log: Option<Vec<ProxyListenersOptionsAccessLoggingServiceAccessLog>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLog {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSink")]
    pub file_sink: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFileSink>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogGrpcService>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFileSink {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonFormat")]
    pub json_format: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stringFormat")]
    pub string_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilter {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "andFilter")]
    pub and_filter: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "durationFilter")]
    pub duration_filter: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterDurationFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcStatusFilter")]
    pub grpc_status_filter: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterGrpcStatusFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerFilter")]
    pub header_filter: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterHeaderFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notHealthCheckFilter")]
    pub not_health_check_filter: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterNotHealthCheckFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orFilter")]
    pub or_filter: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseFlagFilter")]
    pub response_flag_filter: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterResponseFlagFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeFilter")]
    pub runtime_filter: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterRuntimeFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCodeFilter")]
    pub status_code_filter: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceableFilter")]
    pub traceable_filter: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterTraceableFilter>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterDurationFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comparison: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterDurationFilterComparison>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterDurationFilterComparison {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub op: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterDurationFilterComparisonValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterDurationFilterComparisonValue {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterGrpcStatusFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterHeaderFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeader {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegexMatch")]
    pub safe_regex_match: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatchGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatchGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterNotHealthCheckFilter {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterResponseFlagFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterRuntimeFilter {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "percentSampled")]
    pub percent_sampled: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterRuntimeFilterPercentSampled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useIndependentRandomness")]
    pub use_independent_randomness: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterRuntimeFilterPercentSampled {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comparison: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilterComparison>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilterComparison {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub op: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<ProxyListenersOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilterComparisonValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilterComparisonValue {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogFilterTraceableFilter {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsAccessLoggingServiceAccessLogGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalRequestHeadersToLog")]
    pub additional_request_headers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalResponseHeadersToLog")]
    pub additional_response_headers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalResponseTrailersToLog")]
    pub additional_response_trailers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logName")]
    pub log_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticClusterName")]
    pub static_cluster_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsConnectionBalanceConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactBalance")]
    pub exact_balance: Option<ProxyListenersOptionsConnectionBalanceConfigExactBalance>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsConnectionBalanceConfigExactBalance {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, ProxyListenersOptionsExtensionsConfigs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsProxyProtocol {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRequestsWithoutProxyProtocol")]
    pub allow_requests_without_proxy_protocol: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<ProxyListenersOptionsProxyProtocolRules>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsProxyProtocolRules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onTlvPresent")]
    pub on_tlv_present: Option<ProxyListenersOptionsProxyProtocolRulesOnTlvPresent>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlvType")]
    pub tlv_type: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsProxyProtocolRulesOnTlvPresent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersOptionsSocketOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufValue")]
    pub buf_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intValue")]
    pub int_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersRouteOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDirectResponseBodySizeBytes")]
    pub max_direct_response_body_size_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mostSpecificHeaderMutationsWins")]
    pub most_specific_header_mutations_wins: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersSslConfigurations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTlsSessionResumption")]
    pub disable_tls_session_resumption: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaplePolicy")]
    pub ocsp_staple_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<ProxyListenersSslConfigurationsParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<ProxyListenersSslConfigurationsSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ProxyListenersSslConfigurationsSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sniDomains")]
    pub sni_domains: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<ProxyListenersSslConfigurationsSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportSocketConnectTimeout")]
    pub transport_socket_connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersSslConfigurationsParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersSslConfigurationsSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<ProxyListenersSslConfigurationsSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersSslConfigurationsSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<ProxyListenersSslConfigurationsSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersSslConfigurationsSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersSslConfigurationsSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyListenersSslConfigurationsSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, ProxyNamespacedStatusesStatuses>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProxyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

