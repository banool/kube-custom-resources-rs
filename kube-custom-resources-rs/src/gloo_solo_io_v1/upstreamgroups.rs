// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --auto --filename ./crd-catalog/solo-io/gloo/gloo.solo.io/v1/upstreamgroups.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "gloo.solo.io", version = "v1", kind = "UpstreamGroup", plural = "upstreamgroups")]
#[kube(namespaced)]
pub struct UpstreamGroupSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destinations: Option<Vec<UpstreamGroupDestinations>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<UpstreamGroupNamespacedStatuses>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<UpstreamGroupDestinationsDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<UpstreamGroupDestinationsOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<UpstreamGroupDestinationsDestinationConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationSpec")]
    pub destination_spec: Option<UpstreamGroupDestinationsDestinationDestinationSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube: Option<UpstreamGroupDestinationsDestinationKube>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subset: Option<UpstreamGroupDestinationsDestinationSubset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<UpstreamGroupDestinationsDestinationUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationConsul {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<UpstreamGroupDestinationsDestinationDestinationSpecAws>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<UpstreamGroupDestinationsDestinationDestinationSpecAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<UpstreamGroupDestinationsDestinationDestinationSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<UpstreamGroupDestinationsDestinationDestinationSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationStyle")]
    pub invocation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsAlb")]
    pub unwrap_as_alb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsApiGateway")]
    pub unwrap_as_api_gateway: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wrapAsApiGateway")]
    pub wrap_as_api_gateway: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub function: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<UpstreamGroupDestinationsDestinationDestinationSpecGrpcParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecGrpcParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<UpstreamGroupDestinationsDestinationDestinationSpecRestParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationPassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationDestinationSpecRestResponseTransformationPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationKube {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<UpstreamGroupDestinationsDestinationKubeRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationKubeRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationSubset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsDestinationUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferPerRoute")]
    pub buffer_per_route: Option<UpstreamGroupDestinationsOptionsBufferPerRoute>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<UpstreamGroupDestinationsOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<UpstreamGroupDestinationsOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<UpstreamGroupDestinationsOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerManipulation")]
    pub header_manipulation: Option<UpstreamGroupDestinationsOptionsHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagedTransformations")]
    pub staged_transformations: Option<UpstreamGroupDestinationsOptionsStagedTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<UpstreamGroupDestinationsOptionsTransformations>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsBufferPerRoute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<UpstreamGroupDestinationsOptionsBufferPerRouteBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsBufferPerRouteBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<UpstreamGroupDestinationsOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<UpstreamGroupDestinationsOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<UpstreamGroupDestinationsOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<UpstreamGroupDestinationsOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<UpstreamGroupDestinationsOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<UpstreamGroupDestinationsOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<UpstreamGroupDestinationsOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<UpstreamGroupDestinationsOptionsExtauthConfigRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAuth")]
    pub custom_auth: Option<UpstreamGroupDestinationsOptionsExtauthCustomAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsExtauthConfigRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsExtauthCustomAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextExtensions")]
    pub context_extensions: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsExtensionsConfigs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToAdd")]
    pub request_headers_to_add: Option<Vec<UpstreamGroupDestinationsOptionsHeaderManipulationRequestHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToRemove")]
    pub request_headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToAdd")]
    pub response_headers_to_add: Option<Vec<UpstreamGroupDestinationsOptionsHeaderManipulationResponseHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToRemove")]
    pub response_headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsHeaderManipulationRequestHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<UpstreamGroupDestinationsOptionsHeaderManipulationRequestHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<UpstreamGroupDestinationsOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsHeaderManipulationRequestHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsHeaderManipulationResponseHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<UpstreamGroupDestinationsOptionsHeaderManipulationResponseHeadersToAddHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsHeaderManipulationResponseHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub early: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritTransformation")]
    pub inherit_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regular: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegular>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<UpstreamGroupDestinationsOptionsTransformationsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<UpstreamGroupDestinationsOptionsTransformationsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<UpstreamGroupDestinationsOptionsTransformationsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<UpstreamGroupDestinationsOptionsTransformationsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplatePassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<UpstreamGroupDestinationsOptionsTransformationsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<UpstreamGroupDestinationsOptionsTransformationsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplatePassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupDestinationsOptionsTransformationsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, UpstreamGroupNamespacedStatusesStatuses>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamGroupStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

