// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --auto --filename ./crd-catalog/solo-io/gloo/gloo.solo.io/v1/upstreams.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "gloo.solo.io", version = "v1", kind = "Upstream", plural = "upstreams")]
#[kube(namespaced)]
pub struct UpstreamSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<UpstreamAws>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsEc2")]
    pub aws_ec2: Option<UpstreamAwsEc2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<UpstreamAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    pub circuit_breakers: Option<UpstreamCircuitBreakers>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionConfig")]
    pub connection_config: Option<UpstreamConnectionConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<UpstreamConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryMetadata")]
    pub discovery_metadata: Option<UpstreamDiscoveryMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsRefreshRate")]
    pub dns_refresh_rate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub failover: Option<UpstreamFailover>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecks")]
    pub health_checks: Option<Vec<UpstreamHealthChecks>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConnectHeaders")]
    pub http_connect_headers: Option<Vec<UpstreamHttpConnectHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConnectSslConfig")]
    pub http_connect_ssl_config: Option<UpstreamHttpConnectSslConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProxyHostname")]
    pub http_proxy_hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreHealthOnHostRemoval")]
    pub ignore_health_on_host_removal: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialConnectionWindowSize")]
    pub initial_connection_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialStreamWindowSize")]
    pub initial_stream_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube: Option<UpstreamKube>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerConfig")]
    pub load_balancer_config: Option<UpstreamLoadBalancerConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentStreams")]
    pub max_concurrent_streams: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<UpstreamNamespacedStatuses>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlierDetection")]
    pub outlier_detection: Option<UpstreamOutlierDetection>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideStreamErrorOnInvalidHttpMessage")]
    pub override_stream_error_on_invalid_http_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipe: Option<UpstreamPipe>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preconnectPolicy")]
    pub preconnect_policy: Option<UpstreamPreconnectPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolSelection")]
    pub protocol_selection: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyProtocolVersion")]
    pub proxy_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "respectDnsTtl")]
    pub respect_dns_ttl: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<UpstreamSslConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "static")]
    pub r#static: Option<UpstreamStatic>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useHttp2")]
    pub use_http2: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsAccountId")]
    pub aws_account_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationOverrides")]
    pub destination_overrides: Option<UpstreamAwsDestinationOverrides>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableRoleChaining")]
    pub disable_role_chaining: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaFunctions")]
    pub lambda_functions: Option<Vec<UpstreamAwsLambdaFunctions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAwsSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamAwsDestinationOverrides {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationStyle")]
    pub invocation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsAlb")]
    pub unwrap_as_alb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsApiGateway")]
    pub unwrap_as_api_gateway: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wrapAsApiGateway")]
    pub wrap_as_api_gateway: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamAwsLambdaFunctions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaFunctionName")]
    pub lambda_function_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qualifier: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamAwsSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamAwsEc2 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<UpstreamAwsEc2Filters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIp")]
    pub public_ip: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAwsEc2SecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamAwsEc2Filters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kvPair")]
    pub kv_pair: Option<UpstreamAwsEc2FiltersKvPair>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamAwsEc2FiltersKvPair {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamAwsEc2SecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionAppName")]
    pub function_app_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub functions: Option<Vec<UpstreamAzureFunctions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAzureSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamAzureFunctions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authLevel")]
    pub auth_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamAzureSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamCircuitBreakers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConnectionConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonHttpProtocolOptions")]
    pub common_http_protocol_options: Option<UpstreamConnectionConfigCommonHttpProtocolOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectTimeout")]
    pub connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http1ProtocolOptions")]
    pub http1_protocol_options: Option<UpstreamConnectionConfigHttp1ProtocolOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    pub max_requests_per_connection: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perConnectionBufferLimitBytes")]
    pub per_connection_buffer_limit_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpKeepalive")]
    pub tcp_keepalive: Option<UpstreamConnectionConfigTcpKeepalive>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConnectionConfigCommonHttpProtocolOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersWithUnderscoresAction")]
    pub headers_with_underscores_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeadersCount")]
    pub max_headers_count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConnectionConfigHttp1ProtocolOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableTrailers")]
    pub enable_trailers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideStreamErrorOnInvalidHttpMessage")]
    pub override_stream_error_on_invalid_http_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveCaseHeaderKeyFormat")]
    pub preserve_case_header_key_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "properCaseHeaderKeyFormat")]
    pub proper_case_header_key_format: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConnectionConfigTcpKeepalive {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepaliveInterval")]
    pub keepalive_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepaliveProbes")]
    pub keepalive_probes: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepaliveTime")]
    pub keepalive_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsul {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectEnabled")]
    pub connect_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consistencyMode")]
    pub consistency_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceBlacklistTags")]
    pub instance_blacklist_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceTags")]
    pub instance_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryOptions")]
    pub query_options: Option<UpstreamConsulQueryOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<UpstreamConsulServiceSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceTags")]
    pub service_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subsetTags")]
    pub subset_tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulQueryOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCache")]
    pub use_cache: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub graphql: Option<UpstreamConsulServiceSpecGraphql>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<UpstreamConsulServiceSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcJsonTranscoder")]
    pub grpc_json_transcoder: Option<UpstreamConsulServiceSpecGrpcJsonTranscoder>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<UpstreamConsulServiceSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecGraphql {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<UpstreamConsulServiceSpecGraphqlEndpoint>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecGraphqlEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcServices")]
    pub grpc_services: Option<Vec<UpstreamConsulServiceSpecGrpcGrpcServices>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecGrpcGrpcServices {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionNames")]
    pub function_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageName")]
    pub package_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecGrpcJsonTranscoder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapping")]
    pub auto_mapping: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertGrpcStatus")]
    pub convert_grpc_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreUnknownQueryParameters")]
    pub ignore_unknown_query_parameters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredQueryParameters")]
    pub ignored_query_parameters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchIncomingRequestRoute")]
    pub match_incoming_request_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printOptions")]
    pub print_options: Option<UpstreamConsulServiceSpecGrpcJsonTranscoderPrintOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorConfigMap")]
    pub proto_descriptor_config_map: Option<UpstreamConsulServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecGrpcJsonTranscoderPrintOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addWhitespace")]
    pub add_whitespace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintEnumsAsInts")]
    pub always_print_enums_as_ints: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintPrimitiveFields")]
    pub always_print_primitive_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveProtoFieldNames")]
    pub preserve_proto_field_names: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<UpstreamConsulServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "swaggerInfo")]
    pub swagger_info: Option<UpstreamConsulServiceSpecRestSwaggerInfo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<BTreeMap<String, UpstreamConsulServiceSpecRestTransformations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestSwaggerInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamConsulServiceSpecRestTransformationsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamConsulServiceSpecRestTransformationsDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamConsulServiceSpecRestTransformationsExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamConsulServiceSpecRestTransformationsHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamConsulServiceSpecRestTransformationsHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamConsulServiceSpecRestTransformationsMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamConsulServiceSpecRestTransformationsPassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestTransformationsBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestTransformationsDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamConsulServiceSpecRestTransformationsDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestTransformationsDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestTransformationsExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamConsulServiceSpecRestTransformationsExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestTransformationsExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestTransformationsHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestTransformationsHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamConsulServiceSpecRestTransformationsHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestTransformationsHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestTransformationsMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamConsulServiceSpecRestTransformationsPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamDiscoveryMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailover {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UpstreamFailoverPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prioritizedLocalities")]
    pub prioritized_localities: Option<Vec<UpstreamFailoverPrioritizedLocalities>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overprovisioningFactor")]
    pub overprovisioning_factor: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalities {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityEndpoints")]
    pub locality_endpoints: Option<Vec<UpstreamFailoverPrioritizedLocalitiesLocalityEndpoints>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpoints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lbEndpoints")]
    pub lb_endpoints: Option<Vec<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpoints>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingWeight")]
    pub load_balancing_weight: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locality: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLocality>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpoints {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckConfig")]
    pub health_check_config: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsHealthCheckConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingWeight")]
    pub load_balancing_weight: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamSslConfig")]
    pub upstream_ssl_config: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsHealthCheckConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portValue")]
    pub port_value: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRenegotiation")]
    pub allow_renegotiation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLocality {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subZone")]
    pub sub_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysLogHealthCheckFailures")]
    pub always_log_health_check_failures: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHealthCheck")]
    pub custom_health_check: Option<UpstreamHealthChecksCustomHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventLogPath")]
    pub event_log_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcHealthCheck")]
    pub grpc_health_check: Option<UpstreamHealthChecksGrpcHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyEdgeInterval")]
    pub healthy_edge_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyThreshold")]
    pub healthy_threshold: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHealthCheck")]
    pub http_health_check: Option<UpstreamHealthChecksHttpHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialJitter")]
    pub initial_jitter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalJitter")]
    pub interval_jitter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalJitterPercent")]
    pub interval_jitter_percent: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noTrafficInterval")]
    pub no_traffic_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reuseConnection")]
    pub reuse_connection: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpHealthCheck")]
    pub tcp_health_check: Option<UpstreamHealthChecksTcpHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyEdgeInterval")]
    pub unhealthy_edge_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyInterval")]
    pub unhealthy_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyThreshold")]
    pub unhealthy_threshold: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksCustomHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typedConfig")]
    pub typed_config: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksGrpcHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialMetadata")]
    pub initial_metadata: Option<Vec<UpstreamHealthChecksGrpcHealthCheckInitialMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksGrpcHealthCheckInitialMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<UpstreamHealthChecksGrpcHealthCheckInitialMetadataHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<UpstreamHealthChecksGrpcHealthCheckInitialMetadataHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksGrpcHealthCheckInitialMetadataHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksGrpcHealthCheckInitialMetadataHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksHttpHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedStatuses")]
    pub expected_statuses: Option<Vec<UpstreamHealthChecksHttpHealthCheckExpectedStatuses>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToAdd")]
    pub request_headers_to_add: Option<Vec<UpstreamHealthChecksHttpHealthCheckRequestHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToRemove")]
    pub request_headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseAssertions")]
    pub response_assertions: Option<UpstreamHealthChecksHttpHealthCheckResponseAssertions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useHttp2")]
    pub use_http2: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksHttpHealthCheckExpectedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksHttpHealthCheckRequestHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<UpstreamHealthChecksHttpHealthCheckRequestHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<UpstreamHealthChecksHttpHealthCheckRequestHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksHttpHealthCheckRequestHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksHttpHealthCheckRequestHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noMatchHealth")]
    pub no_match_health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseMatchers")]
    pub response_matchers: Option<Vec<UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchHealth")]
    pub match_health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseMatch")]
    pub response_match: Option<UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatch>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKey")]
    pub json_key: Option<UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchJsonKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchJsonKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchJsonKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchJsonKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksTcpHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub receive: Option<Vec<UpstreamHealthChecksTcpHealthCheckReceive>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub send: Option<UpstreamHealthChecksTcpHealthCheckSend>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksTcpHealthCheckReceive {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHealthChecksTcpHealthCheckSend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHttpConnectHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHttpConnectSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRenegotiation")]
    pub allow_renegotiation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<UpstreamHttpConnectSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<UpstreamHttpConnectSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamHttpConnectSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<UpstreamHttpConnectSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHttpConnectSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHttpConnectSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<UpstreamHttpConnectSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHttpConnectSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<UpstreamHttpConnectSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHttpConnectSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHttpConnectSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamHttpConnectSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKube {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceNamespace")]
    pub service_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePort")]
    pub service_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<UpstreamKubeServiceSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subsetSpec")]
    pub subset_spec: Option<UpstreamKubeSubsetSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub graphql: Option<UpstreamKubeServiceSpecGraphql>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<UpstreamKubeServiceSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcJsonTranscoder")]
    pub grpc_json_transcoder: Option<UpstreamKubeServiceSpecGrpcJsonTranscoder>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<UpstreamKubeServiceSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecGraphql {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<UpstreamKubeServiceSpecGraphqlEndpoint>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecGraphqlEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcServices")]
    pub grpc_services: Option<Vec<UpstreamKubeServiceSpecGrpcGrpcServices>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecGrpcGrpcServices {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionNames")]
    pub function_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageName")]
    pub package_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecGrpcJsonTranscoder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapping")]
    pub auto_mapping: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertGrpcStatus")]
    pub convert_grpc_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreUnknownQueryParameters")]
    pub ignore_unknown_query_parameters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredQueryParameters")]
    pub ignored_query_parameters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchIncomingRequestRoute")]
    pub match_incoming_request_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printOptions")]
    pub print_options: Option<UpstreamKubeServiceSpecGrpcJsonTranscoderPrintOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorConfigMap")]
    pub proto_descriptor_config_map: Option<UpstreamKubeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecGrpcJsonTranscoderPrintOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addWhitespace")]
    pub add_whitespace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintEnumsAsInts")]
    pub always_print_enums_as_ints: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintPrimitiveFields")]
    pub always_print_primitive_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveProtoFieldNames")]
    pub preserve_proto_field_names: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<UpstreamKubeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "swaggerInfo")]
    pub swagger_info: Option<UpstreamKubeServiceSpecRestSwaggerInfo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<BTreeMap<String, UpstreamKubeServiceSpecRestTransformations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestSwaggerInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamKubeServiceSpecRestTransformationsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamKubeServiceSpecRestTransformationsDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamKubeServiceSpecRestTransformationsExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamKubeServiceSpecRestTransformationsHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamKubeServiceSpecRestTransformationsHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamKubeServiceSpecRestTransformationsMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamKubeServiceSpecRestTransformationsPassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestTransformationsBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestTransformationsDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamKubeServiceSpecRestTransformationsDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestTransformationsDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestTransformationsExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamKubeServiceSpecRestTransformationsExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestTransformationsExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestTransformationsHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestTransformationsHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamKubeServiceSpecRestTransformationsHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestTransformationsHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestTransformationsMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeServiceSpecRestTransformationsPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeSubsetSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSubset")]
    pub default_subset: Option<UpstreamKubeSubsetSpecDefaultSubset>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fallbackPolicy")]
    pub fallback_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selectors: Option<Vec<UpstreamKubeSubsetSpecSelectors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeSubsetSpecDefaultSubset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamKubeSubsetSpecSelectors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleHostPerSubset")]
    pub single_host_per_subset: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamLoadBalancerConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyPanicThreshold")]
    pub healthy_panic_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "leastRequest")]
    pub least_request: Option<UpstreamLoadBalancerConfigLeastRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityWeightedLbConfig")]
    pub locality_weighted_lb_config: Option<UpstreamLoadBalancerConfigLocalityWeightedLbConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maglev: Option<UpstreamLoadBalancerConfigMaglev>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub random: Option<UpstreamLoadBalancerConfigRandom>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ringHash")]
    pub ring_hash: Option<UpstreamLoadBalancerConfigRingHash>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roundRobin")]
    pub round_robin: Option<UpstreamLoadBalancerConfigRoundRobin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateMergeWindow")]
    pub update_merge_window: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamLoadBalancerConfigLeastRequest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "choiceCount")]
    pub choice_count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slowStartConfig")]
    pub slow_start_config: Option<UpstreamLoadBalancerConfigLeastRequestSlowStartConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamLoadBalancerConfigLeastRequestSlowStartConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aggression: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWeightPercent")]
    pub min_weight_percent: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slowStartWindow")]
    pub slow_start_window: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamLoadBalancerConfigLocalityWeightedLbConfig {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamLoadBalancerConfigMaglev {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamLoadBalancerConfigRandom {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamLoadBalancerConfigRingHash {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ringHashConfig")]
    pub ring_hash_config: Option<UpstreamLoadBalancerConfigRingHashRingHashConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamLoadBalancerConfigRingHashRingHashConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumRingSize")]
    pub maximum_ring_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumRingSize")]
    pub minimum_ring_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamLoadBalancerConfigRoundRobin {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slowStartConfig")]
    pub slow_start_config: Option<UpstreamLoadBalancerConfigRoundRobinSlowStartConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamLoadBalancerConfigRoundRobinSlowStartConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aggression: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWeightPercent")]
    pub min_weight_percent: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slowStartWindow")]
    pub slow_start_window: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, UpstreamNamespacedStatusesStatuses>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamOutlierDetection {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseEjectionTime")]
    pub base_ejection_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consecutive5xx: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveGatewayFailure")]
    pub consecutive_gateway_failure: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveLocalOriginFailure")]
    pub consecutive_local_origin_failure: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutive5xx")]
    pub enforcing_consecutive5xx: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveGatewayFailure")]
    pub enforcing_consecutive_gateway_failure: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveLocalOriginFailure")]
    pub enforcing_consecutive_local_origin_failure: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingLocalOriginSuccessRate")]
    pub enforcing_local_origin_success_rate: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingSuccessRate")]
    pub enforcing_success_rate: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxEjectionPercent")]
    pub max_ejection_percent: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splitExternalLocalOriginErrors")]
    pub split_external_local_origin_errors: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateMinimumHosts")]
    pub success_rate_minimum_hosts: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateRequestVolume")]
    pub success_rate_request_volume: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateStdevFactor")]
    pub success_rate_stdev_factor: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<UpstreamPipeServiceSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub graphql: Option<UpstreamPipeServiceSpecGraphql>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<UpstreamPipeServiceSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcJsonTranscoder")]
    pub grpc_json_transcoder: Option<UpstreamPipeServiceSpecGrpcJsonTranscoder>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<UpstreamPipeServiceSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecGraphql {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<UpstreamPipeServiceSpecGraphqlEndpoint>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecGraphqlEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcServices")]
    pub grpc_services: Option<Vec<UpstreamPipeServiceSpecGrpcGrpcServices>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecGrpcGrpcServices {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionNames")]
    pub function_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageName")]
    pub package_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecGrpcJsonTranscoder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapping")]
    pub auto_mapping: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertGrpcStatus")]
    pub convert_grpc_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreUnknownQueryParameters")]
    pub ignore_unknown_query_parameters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredQueryParameters")]
    pub ignored_query_parameters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchIncomingRequestRoute")]
    pub match_incoming_request_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printOptions")]
    pub print_options: Option<UpstreamPipeServiceSpecGrpcJsonTranscoderPrintOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorConfigMap")]
    pub proto_descriptor_config_map: Option<UpstreamPipeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecGrpcJsonTranscoderPrintOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addWhitespace")]
    pub add_whitespace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintEnumsAsInts")]
    pub always_print_enums_as_ints: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintPrimitiveFields")]
    pub always_print_primitive_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveProtoFieldNames")]
    pub preserve_proto_field_names: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<UpstreamPipeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "swaggerInfo")]
    pub swagger_info: Option<UpstreamPipeServiceSpecRestSwaggerInfo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<BTreeMap<String, UpstreamPipeServiceSpecRestTransformations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestSwaggerInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamPipeServiceSpecRestTransformationsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamPipeServiceSpecRestTransformationsDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamPipeServiceSpecRestTransformationsExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamPipeServiceSpecRestTransformationsHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamPipeServiceSpecRestTransformationsHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamPipeServiceSpecRestTransformationsMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamPipeServiceSpecRestTransformationsPassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestTransformationsBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestTransformationsDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamPipeServiceSpecRestTransformationsDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestTransformationsDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestTransformationsExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamPipeServiceSpecRestTransformationsExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestTransformationsExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestTransformationsHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestTransformationsHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamPipeServiceSpecRestTransformationsHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestTransformationsHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestTransformationsMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPipeServiceSpecRestTransformationsPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamPreconnectPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perUpstreamPreconnectRatio")]
    pub per_upstream_preconnect_ratio: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictivePreconnectRatio")]
    pub predictive_preconnect_ratio: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRenegotiation")]
    pub allow_renegotiation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<UpstreamSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<UpstreamSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<UpstreamSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<UpstreamSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<UpstreamSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStatic {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoSniRewrite")]
    pub auto_sni_rewrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<UpstreamStaticHosts>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<UpstreamStaticServiceSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTls")]
    pub use_tls: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticHosts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckConfig")]
    pub health_check_config: Option<UpstreamStaticHostsHealthCheckConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingWeight")]
    pub load_balancing_weight: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sniAddr")]
    pub sni_addr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticHostsHealthCheckConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub graphql: Option<UpstreamStaticServiceSpecGraphql>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<UpstreamStaticServiceSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcJsonTranscoder")]
    pub grpc_json_transcoder: Option<UpstreamStaticServiceSpecGrpcJsonTranscoder>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<UpstreamStaticServiceSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecGraphql {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<UpstreamStaticServiceSpecGraphqlEndpoint>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecGraphqlEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcServices")]
    pub grpc_services: Option<Vec<UpstreamStaticServiceSpecGrpcGrpcServices>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecGrpcGrpcServices {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionNames")]
    pub function_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageName")]
    pub package_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecGrpcJsonTranscoder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapping")]
    pub auto_mapping: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertGrpcStatus")]
    pub convert_grpc_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreUnknownQueryParameters")]
    pub ignore_unknown_query_parameters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredQueryParameters")]
    pub ignored_query_parameters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchIncomingRequestRoute")]
    pub match_incoming_request_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printOptions")]
    pub print_options: Option<UpstreamStaticServiceSpecGrpcJsonTranscoderPrintOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorConfigMap")]
    pub proto_descriptor_config_map: Option<UpstreamStaticServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecGrpcJsonTranscoderPrintOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addWhitespace")]
    pub add_whitespace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintEnumsAsInts")]
    pub always_print_enums_as_ints: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintPrimitiveFields")]
    pub always_print_primitive_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveProtoFieldNames")]
    pub preserve_proto_field_names: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<UpstreamStaticServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "swaggerInfo")]
    pub swagger_info: Option<UpstreamStaticServiceSpecRestSwaggerInfo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<BTreeMap<String, UpstreamStaticServiceSpecRestTransformations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestSwaggerInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamStaticServiceSpecRestTransformationsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamStaticServiceSpecRestTransformationsDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamStaticServiceSpecRestTransformationsExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamStaticServiceSpecRestTransformationsHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamStaticServiceSpecRestTransformationsHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamStaticServiceSpecRestTransformationsMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamStaticServiceSpecRestTransformationsPassthrough>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestTransformationsBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestTransformationsDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamStaticServiceSpecRestTransformationsDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestTransformationsDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestTransformationsExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamStaticServiceSpecRestTransformationsExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestTransformationsExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestTransformationsHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestTransformationsHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamStaticServiceSpecRestTransformationsHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestTransformationsHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestTransformationsMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStaticServiceSpecRestTransformationsPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UpstreamStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

