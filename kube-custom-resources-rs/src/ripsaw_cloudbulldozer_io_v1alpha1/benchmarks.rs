// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --auto --filename ./crd-catalog/cloud-bulldozer/benchmark-operator/ripsaw.cloudbulldozer.io/v1alpha1/benchmarks.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "ripsaw.cloudbulldozer.io", version = "v1alpha1", kind = "Benchmark", plural = "benchmarks")]
#[kube(namespaced)]
#[kube(status = "BenchmarkStatus")]
pub struct BenchmarkSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clustername: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop_cache_kernel: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop_cache_rook_ceph: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elasticsearch: Option<BenchmarkElasticsearch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub global_overrides: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostpath: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub job_params: Option<Vec<BenchmarkJobParams>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BenchmarkMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prometheus: Option<BenchmarkPrometheus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub snappy: Option<BenchmarkSnappy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub system_metrics: Option<BenchmarkSystemMetrics>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub test_user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workload: Option<BenchmarkWorkload>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BenchmarkElasticsearch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_cert: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BenchmarkMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collection: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stockpileSkipTags")]
    pub stockpile_skip_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stockpileTags")]
    pub stockpile_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub targeted: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BenchmarkPrometheus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub es_parallel: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub es_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prom_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prom_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BenchmarkSnappy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BenchmarkSystemMetrics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collection: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub es_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prom_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prom_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub step: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BenchmarkWorkload {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<BenchmarkWorkloadArgs>,
    /// Workload name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BenchmarkWorkloadArgs {
    /// Set debug log level in the workload
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    /// Timeout used for jobs deployed by this benchmark
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub job_timeout: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BenchmarkStatus {
    /// Benchmark is completed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub complete: Option<bool>,
    /// Metadata collection status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_hi_idx: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_idx: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_low_idx: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_hi_idx: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_idx: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_low_idx: Option<String>,
    /// Benchmark status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Benchmark short UUID
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suuid: Option<String>,
    /// System metrics collection status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub system_metrics: Option<String>,
    /// Benchmark UUID
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

